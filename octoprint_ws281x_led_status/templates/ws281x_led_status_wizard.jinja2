<div class="alert alert-info">
    Mandatory wizard! You will have to complete all steps to finish the wizard.
</div>
<h3>WS281x LED Status SPI Setup</h3>
<span class="text-info lead">As OctoPrint should not be run as root, we need to change a few system settings to let our LEDs run without root access.</span>
<br>
<div id="errorContainer"></div>
<div class="form-inline">
    <span class="text-info">To run these commands, we need root access. Please provide the password</span><br>
    <div id="passwordIncorrect" class="alert alert-error hidden">
        <h4>Error</h4>
        <p id=\"errorText\">
            Incorrect Password
        </p>
    </div>
    <label class="inline" for="PasswordField"><strong>Password for Pi</strong></label><input style="margin-left: 10px" type="password" class="form-control inline" id="PasswordField">
    <p class="help-block">If you haven't changed it, this would be <code>raspberry</code></p>
</div>
<ol>
    <li id="addUser">
        <h4><i class="fa fa-large fa-arrow-right"></i> Add the pi user to gpio group<button style="margin-left: 10px" id="addUserBtn" class="btn btn-success"><i class="fa fa-terminal" aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">Runs <code>sudo adduser pi gpio</code></p>
    </li>
    <li id="spiEnable">
        <h4><i class="fa fa-large fa-arrow-right"></i> Enable SPI<button style="margin-left: 10px" id="enableSPIBtn" class="btn btn-success"><i class="fa fa-terminal" aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">Sets <code>dtparam=spi=on</code> in <code>/boot/config.txt</code></p>
    </li>
    <li id="spiBufferIncrease">
        <h4><i class="fa fa-large fa-arrow-right"></i> Increase SPI buffer<button style="margin-left: 10px" id="spiBufferIncreaseBtn" class="btn btn-success"><i class="fa fa-terminal" aria-hidden="true"></i> Run</button></h4>
    <p class="help-block">Sets <code>spidev.bufsiz=32768</code> in <code>/boot/cmdline.txt</code></p>
    <li id="coreFreqSet">
        <h4><i class="fa fa-large fa-arrow-right"></i> Set core_freq={% if plugin_ws281x_led_status_pi_model == '4' %}500{% else %}250{% endif %}<button style="margin-left: 10px" id="coreFreqBtn" class="btn btn-success"><i class="fa fa-terminal" aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">
            {% if plugin_ws281x_led_status_pi_model != '4' %}
            Set the core_freq to 250 to <br>
            Sets <code>core_freq_min={% if plugin_ws281x_led_status_pi_model == '4' %}500{% else %}250{% endif %}</code> in <code>/boot/config.txt</code>
            {% else %}
            This step is not required on your Raspberry Pi model, so it is marked as completed.
            {% endif %}Sets <code>core_freq={% if plugin_ws281x_led_status_pi_model == '4' %}500{% else %}250{% endif %}</code> in <code>/boot/config.txt</code></p>
    </li>
    <li id="coreFreqMinSet">
        <h4><i class="fa fa-large fa-arrow-right"></i> Set core_freq_min={% if plugin_ws281x_led_status_pi_model == '4' %}500{% else %}250{% endif %}<button style="margin-left: 10px" id="coreFreqMinBtn" class="btn btn-success"><i class="fa fa-terminal" aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">
            {% if plugin_ws281x_led_status_pi_model == '4' %}
            This is required to stop the SPI clock frequency changing, which messes up the timing for LEDs<br>
            Sets <code>core_freq_min={% if plugin_ws281x_led_status_pi_model == '4' %}500{% else %}250{% endif %}</code> in <code>/boot/config.txt</code>
            {% else %}
            This step is not required on your Raspberry Pi model, so it is marked as completed.
            {% endif %}
        </p>
    </li>
</ol>
<div class="alert">
    You will need to reboot your Pi for these changes to take effect
</div>
