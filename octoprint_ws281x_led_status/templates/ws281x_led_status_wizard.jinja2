<h3>WS281x LED Status SPI Setup</h3>
<span class="text-info lead">As OctoPrint should not be run as root, we need to change a few system settings to let our LEDs run without root access.</span>
<br>
<div id="errorContainer"></div>
<div class="form-inline">
    <span class="text-info">To run these commands, we need root access. Please provide the password:</span><br>
    <label class="inline" for="wizardPasswordField"><strong>Password for Pi</strong></label>
    <input style="margin-left: 10px" type="password" class="form-control inline" data-bind="textInput: passwordForPi, click: passwdPopoverRemove" id="wizardPasswordField"
           data-toggle="popover" data-original-title="Password Required" data-content="Since these commands require root access to run, they need the password for Pi. Please enter and try again."  data-placement="bottom" data-trigger="manual">    <p class="help-block">If you haven't changed it, this would be <code>raspberry</code></p>
</div>
<ol>
    <li id="addUser" data-bind="css: { 'text-success': addUserDone }">
        <h4><i class="fa fa-lg" data-bind="css: { 'fa-arrow-right': !addUserDone, 'fa-check': addUserDone}"></i> Add the <code>pi</code> user to <code>gpio</code> group
            <button style="margin-left: 10px" id="addUserBtn" data-bind="enable: !addUserDone(), click: runAddUser"class="btn btn-success"><i class="fa" data-bind="css: {'fa-terminal': !addUserDone() && !inProgressAddUser(), 'fa-check': addUserDone, 'fa-spinner fa-spin': inProgressAddUser } "aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">Runs <code>sudo adduser pi gpio</code></p>
    </li>

    <li id="spiEnable" data-bind="css: { 'text-success': enabledSPI }">
        <h4><i class="fa fa-lg" data-bind="css: { 'fa-arrow-right': !enabledSPI, 'fa-check': enabledSPI}"></i> Enable SPI
            <button style="margin-left: 10px" id="enableSPIBtn" data-bind="enable: !enabledSPI(), click: runEnableSPI" class="btn btn-success"><i class="fa" data-bind="css: {'fa-terminal': !enabledSPI() && !inProgressEnableSPI, 'fa-check': enabledSPI, 'fa-spinner fa-spin': inProgressEnableSPI } " aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">Sets <code>dtparam=spi=on</code> in <code>/boot/config.txt</code></p>
    </li>

    <li id="spiBufferIncrease" data-bind="css: { 'text-success': spiBufferIncreased }">
        <h4><i class="fa fa-lg" data-bind="css: { 'fa-arrow-right': !spiBufferIncreased, 'fa-check': spiBufferIncreased}"></i> Increase SPI buffer
            <button style="margin-left: 10px" id="spiBufferIncreaseBtn" data-bind="enable: !spiBufferIncreased(), click: runIncreaseSPIBuffer" class="btn btn-success"><i class="fa" data-bind="css: {'fa-terminal': !spiBufferIncreased() && !inProgressSpiBuffer, 'fa-check': spiBufferIncrease, 'fa-spinner fa-spin': inProgressSpiBuffer } " aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">Sets <code>spidev.bufsiz=32768</code> in <code>/boot/cmdline.txt</code></p>
    </li>

    <li id="coreFreqSet" data-bind="css: { 'text-success': coreFreqSet }">
        <h4><i class="fa fa-lg" data-bind="css: { 'fa-arrow-right': !coreFreqSet, 'fa-check': coreFreqSet}"></i> Set core_freq=250
            <button style="margin-left: 10px" id="coreFreqBtn" data-bind="enable: !coreFreqSet(), click: runSetCoreFreq" class="btn btn-success"><i class="fa" data-bind="css: {'fa-terminal': !coreFreqSet()  &&!inProgressCoreFreq , 'fa-check': coreFreqSet, 'fa-spinner fa-spin': inProgressCoreFreq } " aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">
            {% if plugin_ws281x_led_status_pi_model != '4' %}
            Set the core_freq to 250 to <br>
            Sets <code>core_freq=250</code> in <code>/boot/config.txt</code>
            {% else %}
            This step is not required on your Raspberry Pi model, so it is marked as completed.
            {% endif %}</p>
    </li>

    <li id="coreFreqMinSet" data-bind="css: { 'text-success': coreFreqMinSet }">
        <h4><i class="fa fa-lg" data-bind="css: { 'fa-arrow-right': !coreFreqMinSet, 'fa-check': coreFreqMinSet}"></i> Set core_freq_min=500
            <button style="margin-left: 10px" id="coreFreqMinBtn" data-bind="enable: !coreFreqMinSet(), click: runSetCoreFreqMin" class="btn btn-success"><i class="fa" data-bind="css: {'fa-terminal': !coreFreqMinSet() && !inProgressCoreFreqMin(), 'fa-check': coreFreqMinSet, 'fa-spinner fa-spin': inProgressCoreFreqMin } " aria-hidden="true"></i> Run</button></h4>
        <p class="help-block">
            {% if plugin_ws281x_led_status_pi_model == '4' %}
            This is required to stop the SPI clock frequency changing, which messes up the timing for LEDs<br>
            Sets <code>core_freq_min=500</code> in <code>/boot/config.txt</code>
            {% else %}
            This step is not required on your Raspberry Pi model, so it is marked as completed.
            {% endif %}
        </p>
    </li>
</ol>
<div class="alert">
    You will need to reboot your Pi for these changes to take effect
</div>
